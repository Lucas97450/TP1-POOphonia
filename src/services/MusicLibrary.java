package services;

import models.MusicItem;
import java.util.ArrayList;
import java.util.List;

public class MusicLibrary {
    private List<MusicItem> items = new ArrayList<>();
    private MusicItem currentlyPlaying; // R√©f√©rence √† l'√©l√©ment en cours de lecture

    public MusicLibrary() {
        this.items = new ArrayList<>();
        this.currentlyPlaying = null;
    }

    // ‚úÖ Ajouter un √©l√©ment musical
    public void addItem(MusicItem item) {
        if (item != null) {
            items.add(item);
            System.out.println("Ajout√© : " + item.getInfo());
        } else {
            System.out.println("Erreur : √âl√©ment musical invalide.");
        }
    }

    // ‚úÖ Supprimer un √©l√©ment par ID
    public void removeItem(int id) {
        MusicItem toRemove = findItemById(id);
        if (toRemove != null) {
            items.remove(toRemove);
            System.out.println("Supprim√© : " + toRemove.getInfo());
        } else {
            System.out.println("Erreur : Aucun √©l√©ment trouv√© avec l'ID " + id);
        }
    }

    // ‚úÖ Lister tous les √©l√©ments de la biblioth√®que
    public void listAllItems() {
        if (items.isEmpty()) {
            System.out.println("La biblioth√®que est vide.");
        } else {
            System.out.println("Contenu de la biblioth√®que :");
            for (MusicItem item : items) {
                System.out.println(item.getInfo());
            }
        }
    }

    // ‚úÖ Trouver un √©l√©ment par ID
    private MusicItem findItemById(int id) {
        for (MusicItem item : items) {
            if (item != null && item.getId() == id) {
                return item;
            }
        }
        return null;
    }

    // ‚úÖ Jouer un √©l√©ment musical par ID
    public void playItem(int id) {
        MusicItem item = findItemById(id);
        if (item != null) {
            if (currentlyPlaying != null) {
                currentlyPlaying.stop();
            }
            item.play();
            currentlyPlaying = item;
            System.out.println("Lecture de : " + item.getInfo());
        } else {
            System.out.println("Erreur : Aucun √©l√©ment trouv√© avec l'ID " + id);
        }
    }

    // ‚úÖ Mettre en pause
    public void pauseItem() {
        if (currentlyPlaying != null) {
            System.out.println("Pause : " + currentlyPlaying.getInfo());
            currentlyPlaying.stop();
            currentlyPlaying = null;
        } else {
            System.out.println("Erreur : Aucun √©l√©ment en cours de lecture.");
        }
    }

    // üîπ Recherche un √©l√©ment par titre ou artiste
    public void searchItem(String query) {
        if (query.isEmpty()) {
            System.out.println("Erreur: Veuillez entrer un mot-cl√© pour la recherche.");
            return;
        }

        List<MusicItem> results = new ArrayList<>();
        String lowerQuery = query.toLowerCase();

        for (MusicItem item : items) {
            if (item.getTitle().toLowerCase().contains(lowerQuery) ||
                    (item instanceof models.Song && ((models.Song) item).getArtist().toLowerCase().contains(lowerQuery)) ||
                    (item instanceof models.Album && ((models.Album) item).getArtist().toLowerCase().contains(lowerQuery)) ||
                    (item instanceof models.Podcast && ((models.Podcast) item).getHost().toLowerCase().contains(lowerQuery))) {
                results.add(item);
            }
        }

        if (results.isEmpty()) {
            System.out.println("Aucun √©l√©ment trouv√© pour: " + query);
        } else {
            System.out.println("R√©sultats de la recherche pour: " + query);
            for (MusicItem item : results) {
                System.out.println(item.getInfo());
            }
        }
    }


    // ‚úÖ Arr√™ter la lecture
    public void stopItem() {
        if (currentlyPlaying != null) {
            System.out.println("Arr√™t de : " + currentlyPlaying.getInfo());
            currentlyPlaying.stop();
            currentlyPlaying = null;
        } else {
            System.out.println("Erreur : Aucun √©l√©ment en cours de lecture.");
        }
    }

    // ‚úÖ Vider la biblioth√®que
    public void clearAllItems() {
        items.clear();
        currentlyPlaying = null;
        System.out.println("La biblioth√®que a √©t√© vid√©e.");
    }
}
